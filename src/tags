!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ETHERLOOPBACK	panalysis.c	33;"	d	file:
ETHERTYPE_ARP	panalysis.c	29;"	d	file:
ETHERTYPE_IP	panalysis.c	28;"	d	file:
ETHERTYPE_IPV6	panalysis.c	32;"	d	file:
ETHERTYPE_IPX	panalysis.c	34;"	d	file:
ETHERTYPE_PUP	panalysis.c	27;"	d	file:
ETHERTYPE_REVARP	panalysis.c	30;"	d	file:
ETHERTYPE_VLAN	panalysis.c	31;"	d	file:
ETHER_ADDR_LEN	panalysis.c	5;"	d	file:
ETHER_CRC_LEN	panalysis.c	7;"	d	file:
ETHER_HDR_LEN	panalysis.c	8;"	d	file:
ETHER_IS_VALID_LEN	panalysis.c	11;"	d	file:
ETHER_MAX_LEN	panalysis.c	10;"	d	file:
ETHER_MIN_LEN	panalysis.c	9;"	d	file:
ETHER_TYPE_LEN	panalysis.c	6;"	d	file:
EtherHdr	panalysis.c	/^} EtherHdr;$/;"	t	typeref:struct:_EtherHdr	file:
_EtherHdr	panalysis.c	/^typedef struct _EtherHdr {$/;"	s	file:
_EtherHdr::ether_dst	panalysis.c	/^	unsigned char ether_dst[6];$/;"	m	struct:_EtherHdr	file:	access:public
_EtherHdr::ether_src	panalysis.c	/^	unsigned char ether_src[6];$/;"	m	struct:_EtherHdr	file:	access:public
_EtherHdr::ether_type	panalysis.c	/^	unsigned short ether_type;$/;"	m	struct:_EtherHdr	file:	access:public
_MYLIBPCAP_H	mylibpcap.h	2;"	d
analysis_ethernet	panalysis.c	/^void analysis_ethernet(u_char *user, const struct  pcap_pkthdr *h, u_char *p)$/;"	f	signature:(u_char *user, const struct pcap_pkthdr *h, u_char *p)
another_thread1	mylibpcap.h	/^void* another_thread1(void* args);$/;"	p	signature:(void* args)
args	panalysis.c	/^	void **args;$/;"	m	struct:hook_and_sinker	file:	access:public
descr	mylibpcap.c	/^	pcap_close(descr);\/\/ 关闭会话$/;"	v
descr	mylibpcap.c	/^	pcap_t* descr; \/\/句柄$/;"	v
dev	mylibpcap.c	/^	char* dev; \/\/网络设备$/;"	v
dumper_filename	mylibpcap.c	/^	pcap_dump_close(dumper_filename);\/\/关闭文件$/;"	v
errbuf	mylibpcap.c	/^	char errbuf[PCAP_ERRBUF_SIZE]; \/\/出错信息$/;"	v
ether_addr	panalysis.c	/^struct ether_addr {$/;"	s	file:
ether_addr::octet	panalysis.c	/^	u_char octet[ETHER_ADDR_LEN];$/;"	m	struct:ether_addr	file:	access:public
ether_dhost	panalysis.c	/^	u_char ether_dhost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:	access:public
ether_dst	panalysis.c	/^	unsigned char ether_dst[6];$/;"	m	struct:_EtherHdr	file:	access:public
ether_header	panalysis.c	/^struct ether_header {$/;"	s	file:
ether_header::ether_dhost	panalysis.c	/^	u_char ether_dhost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:	access:public
ether_header::ether_shost	panalysis.c	/^	u_char ether_shost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:	access:public
ether_header::ether_type	panalysis.c	/^	u_short ether_type;$/;"	m	struct:ether_header	file:	access:public
ether_shost	panalysis.c	/^	u_char ether_shost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header	file:	access:public
ether_src	panalysis.c	/^	unsigned char ether_src[6];$/;"	m	struct:_EtherHdr	file:	access:public
ether_type	panalysis.c	/^	u_short ether_type;$/;"	m	struct:ether_header	file:	access:public
ether_type	panalysis.c	/^	unsigned short ether_type;$/;"	m	struct:_EtherHdr	file:	access:public
filter_app	mylibpcap.c	/^	char filter_app[1024] = ""; \/\/过滤规则$/;"	v
fp	mylibpcap.c	/^	struct bpf_program fp; \/\/编译过的过滤规则$/;"	v	typeref:struct:bpf_program
got_packet	mylibpcap.h	/^void got_packet(u_char* args, const struct pcap_pkthdr* header, const u_char* packet);$/;"	p	signature:(u_char* args, const struct pcap_pkthdr* header, const u_char* packet)
got_packet	panalysis.c	/^void got_packet(u_char* args, const struct pcap_pkthdr* header, const u_char* packet)$/;"	f	signature:(u_char* args, const struct pcap_pkthdr* header, const u_char* packet)
hook	panalysis.c	/^	void (*hook) (packet_data*, void**);$/;"	m	struct:hook_and_sinker	file:	access:public
hook_and_sinker	panalysis.c	/^struct hook_and_sinker$/;"	s	file:
hook_and_sinker::args	panalysis.c	/^	void **args;$/;"	m	struct:hook_and_sinker	file:	access:public
hook_and_sinker::hook	panalysis.c	/^	void (*hook) (packet_data*, void**);$/;"	m	struct:hook_and_sinker	file:	access:public
hook_and_sinker::linktype	panalysis.c	/^	bpf_u_int32 linktype;$/;"	m	struct:hook_and_sinker	file:	access:public
hook_and_sinker::proc_flags	panalysis.c	/^	int proc_flags;$/;"	m	struct:hook_and_sinker	file:	access:public
hs	mylibpcap.c	/^	struct hook_and_sinker hs;$/;"	v	typeref:struct:hook_and_sinker
linktype	panalysis.c	/^	bpf_u_int32 linktype;$/;"	m	struct:hook_and_sinker	file:	access:public
main	test/libpcappacket.c	/^int main()$/;"	f
maskp	mylibpcap.c	/^	bpf_u_int32 maskp; \/\/子网掩码$/;"	v
my_hook	panalysis.c	/^void my_hook(packet_data *pd, void **args)$/;"	f	signature:(packet_data *pd, void **args)
netp	mylibpcap.c	/^	bpf_u_int32 netp; \/\/ip 地址$/;"	v
octet	panalysis.c	/^	u_char octet[ETHER_ADDR_LEN];$/;"	m	struct:ether_addr	file:	access:public
print_packet	panalysis.c	/^void print_packet(packet_data* p, int what_to_show)$/;"	f	signature:(packet_data* p, int what_to_show)
proc_flags	panalysis.c	/^	int proc_flags;$/;"	m	struct:hook_and_sinker	file:	access:public
process_pcap	panalysis.c	/^void process_pcap(u_char* user, const struct pcap_pkthdr* h, const u_char*p)$/;"	f	signature:(u_char* user, const struct pcap_pkthdr* h, const u_char*p)
process_pcap	panalysis.c	/^void process_pcap(u_char*, const struct pcap_pkthdr* , const u_char*);$/;"	p	file:	signature:(u_char*, const struct pcap_pkthdr* , const u_char*)
string	mylibpcap.c	/^	char string[1024];$/;"	v
threads_click	mylibpcap.c	/^void threads_click(GtkWidget* widget, gpointer data)$/;"	f	signature:(GtkWidget* widget, gpointer data)
threads_click	mylibpcap.h	/^void threads_click(GtkWidget* widget, gpointer data);$/;"	p	signature:(GtkWidget* widget, gpointer data)
